@page "/languages/delete"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Language</h2>
    <hr />
    @if (language is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@language.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@language.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LessonId</dt>
            <dd class="col-sm-10">@language.LessonId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@language.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@language.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@language.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@language.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="language" OnValidSubmit="DeleteLanguage" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(language is null)">Delete</button> |
            <a href="/languages">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Language? language;

    [SupplyParameterFromQuery]
    private int LanguageId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        language = await context.Language.FirstOrDefaultAsync(m => m.LanguageId == LanguageId);

        if (language is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteLanguage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Language.Remove(language!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/languages");
    }
}
