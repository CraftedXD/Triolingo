@page "/languages/edit"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Edit Language</PageTitle>

<h1>Edit Language</h1>
<hr />

@if (Language is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Language" OnValidSubmit="UpdateLanguage">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/>

                

                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Language.Name" class="form-control" required />
                    <ValidationMessage For="() => Language.Name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="lessonid" class="form-label">LessonId:</label>
                    <InputNumber id="lessonid" @bind-Value="Language.LessonId" class="form-control" />
                    <ValidationMessage For="() => Language.LessonId" class="text-danger" />
                </div>

                <!-- Readonly UpdatedBy Field -->
                <div class="mb-3">
                    <label for="updatedby" class="form-label">Updated By:</label>
                    <InputText id="updatedby" @bind-Value="Language.UpdatedBy" class="form-control" readonly />
                </div>

                <!-- Hidden DateUpdated Field -->
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">Date Updated:</label>
                    <InputDate id="dateupdated" @bind-Value="Language.DateUpdated" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/languages">Back to List</a>
</div>

@code {
    private string userId = string.Empty;

    [SupplyParameterFromQuery]
    private int LanguageId { get; set; }

    private Language? Language { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        // Fetch language by ID
        Language = await context.Language.FirstOrDefaultAsync(m => m.LanguageId == LanguageId);

        if (Language is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Get the authenticated user's email
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Identity?.Name ?? "Admin";

        // Ensure UpdatedBy is set correctly
        Language.UpdatedBy = userId;
    }

    private async Task UpdateLanguage()
    {
        if (Language is null) return;

        using var context = DbFactory.CreateDbContext();

        // Ensure correct values are set
        Language.UpdatedBy = userId;
        Language.DateUpdated = DateTime.Now;

        // Update language in database
        context.Attach(Language).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!LanguageExists(Language.LanguageId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/languages");
    }

    private bool LanguageExists(int languageId)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Language.Any(e => e.LanguageId == languageId);
    }
}
