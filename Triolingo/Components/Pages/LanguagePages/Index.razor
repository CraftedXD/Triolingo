@page "/languages"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Triolingo.Domain
@using Triolingo.Data
@using Microsoft.AspNetCore.Authorization
@implements IAsyncDisposable
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Languages</PageTitle>

<h1>Which language would you like to learn?</h1>

<p>
    <AuthorizeView Roles="Administrator">
        <a href="languages/create">Add Language</a>
    </AuthorizeView>
</p>

<!-- Dynamically Generate Language Buttons -->
<div>
    @if (Languages != null && Languages.Any())
    {
        @foreach (var language in Languages)
        {
            <button class="btn btn-primary" onclick="location.href='/lessons/@language.Name.ToLower()'">
                @language.Name
            </button>
        }
    }
    else
    {
        <p>No languages available.</p>
    }
</div>

<!-- QuickGrid needs IQueryable<T> instead of List<T> -->
<QuickGrid Class="table" Items="Languages">
    <PropertyColumn Property="language => language.Name" />
    <PropertyColumn Property="language => language.DateCreated" />
    <PropertyColumn Property="language => language.DateUpdated" />
    <PropertyColumn Property="language => language.CreatedBy" />
    <PropertyColumn Property="language => language.UpdatedBy" />

    <TemplateColumn Context="language">
        <AuthorizeView Roles="Administrator">
            <a href="@($"languages/edit?languageid={language.LanguageId}")">Edit</a> |
            <a href="@($"languages/details?languageid={language.LanguageId}")">Details</a> |
            <a href="@($"languages/delete?languageid={language.LanguageId}")">Delete</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    private TriolingoContext context = default!;
    private IQueryable<Language> Languages = default!; // Use IQueryable

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Languages = context.Language.AsQueryable(); // Ensure it's IQueryable
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
