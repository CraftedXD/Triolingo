@page "/languages/create"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@using Triolingo.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Create Language</PageTitle>

<h1>Create Language</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Language" OnValidSubmit="AddLanguage">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Language.Name" class="form-control" required />
                <ValidationMessage For="() => Language.Name" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="lessonid" class="form-label">LessonId:</label>
                <InputNumber id="lessonid" @bind-Value="Language.LessonId" class="form-control" />
                <ValidationMessage For="() => Language.LessonId" class="text-danger" />
            </div>

            <!-- Readonly Fields -->
            <div class="mb-3">
                <label for="createdby" class="form-label">Created By:</label>
                <InputText id="createdby" @bind-Value="Language.CreatedBy" class="form-control" readonly="true" />
            </div>


            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/languages">Back to List</a>
</div>

@code {
    private string userId = string.Empty;
    private IList<TriolingoUser> LangUser;
    [SupplyParameterFromForm]
    private Language Language { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch the authenticated user's email and set it to CreatedBy
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;
        // Auto-assign values
        Language.CreatedBy = userEmail;
    }
    private async Task AddLanguage()
    {
        using var context = DbFactory.CreateDbContext();
        
        Language.DateCreated = DateTime.Now;
        // Save to database
        context.Language.Add(Language);
        await context.SaveChangesAsync();
        // Redirect to list page
        NavigationManager.NavigateTo("/languages");
    }
}
