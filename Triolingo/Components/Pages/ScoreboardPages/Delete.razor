@page "/scoreboards/delete"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]
<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Scoreboard</h2>
    <hr />
    @if (scoreboard is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TotalScore</dt>
            <dd class="col-sm-10">@scoreboard.TotalScore</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@scoreboard.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LanguageId</dt>
            <dd class="col-sm-10">@scoreboard.LanguageId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@scoreboard.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@scoreboard.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@scoreboard.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@scoreboard.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="scoreboard" OnValidSubmit="DeleteScoreboard" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(scoreboard is null)">Delete</button> |
            <a href="/scoreboards">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Scoreboard? scoreboard;

    [SupplyParameterFromQuery]
    private int ScoreboardId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        scoreboard = await context.Scoreboard.FirstOrDefaultAsync(m => m.ScoreboardId == ScoreboardId);

        if (scoreboard is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteScoreboard()
    {
        using var context = DbFactory.CreateDbContext();
        context.Scoreboard.Remove(scoreboard!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/scoreboards");
    }
}
