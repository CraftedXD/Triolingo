@page "/quizzes/japanese"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Triolingo.Domain
@using Triolingo.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TriolingoContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Japanese Quiz</PageTitle>

<h1>@QuizTitle</h1>

@if (questions != null && questions.Any())
{
    @foreach (var question in questions)
    {
        <div class="question-container">
            <p><b>@question.QuestionText</b></p>
            <input type="text" @bind="userAnswers[question.QuestionId]" placeholder="Enter your answer" class="form-control" />
        </div>
        <br />
    }

    <button class="btn btn-primary" @onclick=CheckAnswers>Submit Answers</button>

    @if (showResults)
    {
        <h2>Results:</h2>
        <ul>
            @foreach (var question in questions)
            {
                var userAnswer = userAnswers[question.QuestionId];
                var isCorrect = userAnswer?.Equals(question.CorrectAnswer, StringComparison.OrdinalIgnoreCase) ?? false;
                <li>@(isCorrect ? $"✔ {question.QuestionText}: Correct!" : $"✘ {question.QuestionText}: Incorrect (Your Answer: {userAnswer ?? "None"}, Correct: {question.CorrectAnswer})")</li>
            }
        </ul>
        <p><strong>Score: @score / @totalQuestions</strong></p>

        @if (score >= 3)
        {
            <p>Congratulations! You have progressed to the next lesson.</p>
        }
        else
        {
            <p>Try again to improve your score.</p>
        }
    }
}
else
{
    <p>No quiz or questions available.</p>
}

@code {
    private TriolingoContext context = default!;
    private string QuizTitle { get; set; } = "Loading...";
    private List<Question> questions = new();
    private Dictionary<int, string?> userAnswers = new();
    private bool showResults = false;
    private int score = 0;
    private int totalQuestions = 0;
    private User? currentUser;
    private int currentLessonOrder = 1;
    private int quizId = 0; // Store QuizId for saving results

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        // Get authenticated user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;

        if (userEmail != null)
        {
            currentUser = await context.User.FirstOrDefaultAsync(u => u.Email == userEmail);
        }

        if (currentUser != null)
        {
            currentLessonOrder = currentUser.UserProgress;
        }

        // Fetch the lesson based on user's progress
        var lesson = await context.Lesson.FirstOrDefaultAsync(l => l.LanguageId == 1 && l.LessonOrder == currentLessonOrder);

        if (lesson != null)
        {
            var quiz = await context.Quiz.FirstOrDefaultAsync(q => q.LessonId == lesson.LessonId);

            if (quiz != null)
            {
                QuizTitle = quiz.QuizTitle;
                quizId = quiz.QuizId; // Store QuizId

                questions = await context.Question.Where(q => q.QuizId == quiz.QuizId).ToListAsync();
                totalQuestions = questions.Count;

                foreach (var question in questions)
                {
                    userAnswers[question.QuestionId] = null;
                }
            }
            else
            {
                QuizTitle = "Quiz not found for the selected lesson.";
            }
        }
        else
        {
            QuizTitle = "Lesson not found for the selected language.";
        }
    }

    private async Task CheckAnswers()
    {
        if (questions.Count == 0) return;

        score = questions.Count(q => userAnswers[q.QuestionId]?.Equals(q.CorrectAnswer, StringComparison.OrdinalIgnoreCase) ?? false);
        showResults = true;

        if (currentUser != null && quizId > 0)
        {
            // Save quiz result
            var quizResult = new QuizResult
                {
                    UserId = currentUser.UserId,
                    QuizId = quizId,
                    Score = score
                };

            context.QuizResult.Add(quizResult);

            // Update user progress if they pass (3/5 correct)
            if (score >= 3)
            {
                currentUser.UserProgress++;
                context.User.Update(currentUser);
            }

            await context.SaveChangesAsync();
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
