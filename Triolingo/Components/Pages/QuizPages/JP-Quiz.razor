@page "/quizzes/japanese"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.VisualBasic
@using Triolingo.Domain
@using Triolingo.Data
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IDbContextFactory<TriolingoContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Japanese Quiz</PageTitle>

<h1>@QuizTitle</h1>

@if (questions != null && questions.Any())
{
    @foreach (var question in questions)
    {
        <div class="question-container">
            <p><b>@question.QuestionText</b></p>
            <input type="text" @bind="userAnswers[question.QuestionId]" placeholder="Enter your answer" class="form-control" />
        </div>
        <br />
    }

    <button @onclick="SubmitAnswers" class="btn btn-primary">Submit Answers</button>
}
else
{
    <p>No quiz or questions available.</p>
}

@code {

    private TriolingoContext context = default!;
    private string QuizTitle { get; set; } = "Loading...";
    private List<Question> questions = new();
    private Dictionary<int, string?> userAnswers = new();
    private string? currentUserEmail;
    private int currentLessonOrder = 1; // Default to 1 if no progress is found
    private int quizId = 0; // Store QuizId for saving results

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        // Get authenticated user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserEmail = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(currentUserEmail))
        {
            currentLessonOrder = await context.User
                .Where(u => u.Email == currentUserEmail)
                .Select(u => u.UserProgress) // Directly select UserProgress as an int
                .FirstOrDefaultAsync();
        }

        // Fetch the lesson based on user's progress
        var lesson = await context.Lesson
            .FirstOrDefaultAsync(l => l.LanguageId == 1 && l.LessonOrder == currentLessonOrder);

        if (lesson != null)
        {
            var quiz = await context.Quiz.FirstOrDefaultAsync(q => q.LessonId == lesson.LessonId);

            if (quiz != null)
            {
                QuizTitle = quiz.QuizTitle;
                quizId = quiz.QuizId; // Store QuizId

                questions = await context.Question
                    .Where(q => q.QuizId == quiz.QuizId)
                    .ToListAsync();

                foreach (var question in questions)
                {
                    userAnswers[question.QuestionId] = null;
                }
            }
            else
            {
                QuizTitle = "Quiz not found for the selected lesson.";
            }
        }
        else
        {
            QuizTitle = "Lesson not found for the selected language.";
        }
    }

    private async Task SubmitAnswers()
    {
        foreach (var question in questions)
        {
            question.UserAnswer = userAnswers[question.QuestionId];
            context.Question.Update(question);
        }

        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/quizresults/japanese/review/{quizId}");
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
