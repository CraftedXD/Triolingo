@page "/quizzes/chinese"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@using Triolingo.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory

<PageTitle>Chinese Quiz</PageTitle>

<h1>@QuizTitle</h1>

@if (questions != null && questions.Any())
{
    @foreach (var question in questions)
    {
        <div class="question-container">
            <p><b>@question.QuestionText</b></p>
            <input type="text" @bind="userAnswers[question.QuestionId]" placeholder="Enter your answer" class="form-control" />
        </div>
        <br />
    }

    <button class="btn btn-primary" @onclick="CheckAnswers">Check Answers</button>

    @if (showResults)
    {
        <h2>Results:</h2>
        <ul>
            @foreach (var question in questions)
            {
                var userAnswer = userAnswers[question.QuestionId];
                var isCorrect = userAnswer?.Equals(question.CorrectAnswer, StringComparison.OrdinalIgnoreCase) ?? false;
                <li>@(isCorrect ? $"✔ {question.QuestionText}: Correct!" : $"✘ {question.QuestionText}: Incorrect (Your Answer: {userAnswer ?? "None"}, Correct: {question.CorrectAnswer})")</li>
            }
        </ul>
    }
}
else
{
    <p>No quiz or questions available.</p>
}

@code {
    private TriolingoContext context = default!;
    private string QuizTitle { get; set; } = "Loading...";
    private List<Question> questions = new();
    private Dictionary<int, string?> userAnswers = new(); // Stores user input
    private bool showResults = false;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        // Fetch the quiz for Japanese
        var quiz = await context.Quiz.FirstOrDefaultAsync(q => q.LessonId == 3);

        if (quiz != null)
        {
            QuizTitle = quiz.QuizTitle;

            // Fetch questions for the quiz
            questions = await context.Question
                .Where(q => q.QuizId == quiz.QuizId)
                .ToListAsync();

            // Initialize the dictionary for user answers
            foreach (var question in questions)
            {
                userAnswers[question.QuestionId] = null;
            }
        }
        else
        {   
            QuizTitle = "Quiz not found";
        }
    }

    private void CheckAnswers()
    {
        showResults = true; // Display results after checking answers
        StateHasChanged(); // Trigger UI refresh

    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
