@page "/quizresults/japanese/review/{quizId:int}"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@using Triolingo.Data
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<TriolingoContext> DbFactory
@inject NavigationManager Navigation

<PageTitle>Quiz Review</PageTitle>

<h1>Review Your Answers</h1>

@if (questions != null && questions.Any())
{
    int correctAnswers = questions.Count(q => q.UserAnswer == q.CorrectAnswer);

    @foreach (var question in questions)
    {
        <div class="question-container">
            <p><b>@question.QuestionText</b></p>
            <p>Your Answer: @question.UserAnswer</p>
            <p>Correct Answer: @question.CorrectAnswer</p>
            <p>@(question.UserAnswer == question.CorrectAnswer ? "✔️" : "❌")</p>
        </div>
        <br />
    }

    <p><b>Score: @correctAnswers / @questions.Count</b></p>

    <button class="btn btn-primary" @onclick="TryQuizAgain">Try Again</button>

    @if (correctAnswers >= 3 && questions.Count == 5)
    {
        <button class="btn btn-success" @onclick="GoToNextLesson">Next Lesson</button>
    }
}
else
{
    <p>No questions available for review.</p>
}

@code {
    private string userId = string.Empty;
    private IList<QuizResult> QuizResults;
    private IList<TriolingoUser> LangUser;
    private int correctAnswers = 0;

    [Parameter]
    public int QuizId { get; set; }

    private TriolingoContext context = default!;
    private List<Question> questions = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext(); // ✅ Assign context instance

        LangUser = context.Users.ToList();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        string userEmail = user.FindFirst("userId")?.Value ?? string.Empty;

        int.TryParse(userId, out int userIdInt);

        // ✅ Load questions
        questions = await context.Question.Where(q => q.QuizId == QuizId).ToListAsync();

        if (questions != null && questions.Any())
        {
            correctAnswers = questions.Count(q => q.UserAnswer == q.CorrectAnswer); // ✅ Ensure correctAnswers is set
            SaveQuizScore(userIdInt, userEmail);
        }
    }

    private void SaveQuizScore(int userIdInt, string userEmail)
    {
        var existingResult = context.QuizResult
            .FirstOrDefault(qr => qr.Email == userId && qr.QuizId == QuizId);

        if (existingResult != null)
        {
            // ✅ Only update score if the new score is higher
            if (correctAnswers > existingResult.Score)
            {
                existingResult.Score = correctAnswers;
                existingResult.Email = userEmail;
            }
        }
        else
        {
            var newQuizResult = new QuizResult
                {
                    UserId = userIdInt,
                    QuizId = QuizId,
                    Score = correctAnswers,
                    Email = userEmail,
                    DateCreated = DateTime.Now
                };

            context.QuizResult.Add(newQuizResult);
        }

        // ✅ Load and update the existing user
        var existingUser = context.Users.FirstOrDefault(u => u.Id == userEmail);
        if (existingUser != null)
        {
            // ✅ Get highest score recorded for this quiz
            var highestScoreForQuiz = context.QuizResult
                .Where(qr => qr.Email == userId && qr.QuizId == QuizId)
                .Max(qr => (int?)qr.Score) ?? 0;

            // ✅ Check if the user has already completed this quiz (scored 3+ before)
            bool hasCompletedQuiz = context.QuizResult
                .Any(qr => qr.Email == userId && qr.QuizId == QuizId && qr.Score >= 3);

            // ✅ Only increase progress if this is the first time scoring 3+ on this quiz
            if (correctAnswers >= 3 && !hasCompletedQuiz)
            {
                existingUser.UserProgress += 1; // Increase progress only once per quiz
            }

            // ✅ Update score if the new score is higher
            if (correctAnswers > highestScoreForQuiz)
            {
                existingUser.UserScore += (correctAnswers - highestScoreForQuiz); // Increment only new points
            }
        }


        context.SaveChanges(); // ✅ Save only if new score is higher
    }



    private void TryQuizAgain()
    {
        Navigation.NavigateTo($"/quizzes/japanese");
    }

    private void GoToNextLesson()
    {
        Navigation.NavigateTo("/lessons/japanese");
    }
}
