@page "/quizresults"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Triolingo.Domain
@using Triolingo.Data
@using Microsoft.AspNetCore.Components.Authorization
@implements IAsyncDisposable
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Quiz Results</PageTitle>

<h1>Your Quiz Results</h1>

@if (quizResults.Any())
{
    <QuickGrid Items="quizResults.AsQueryable()" Class="table">
        <PropertyColumn Title="Score" Property="(QuizResult quizresult) => quizresult.Score" />
        <PropertyColumn Title="Quiz ID" Property="(QuizResult quizresult) => quizresult.QuizId" />
        <PropertyColumn Title="Date Created" Property="(QuizResult quizresult) => quizresult.DateCreated" />

        <AuthorizeView Roles="Administrator">
            <TemplateColumn Title="Actions" Context="quizresult">
                <a href="@($"quizresults/edit?quizresultid={quizresult.QuizResultId}")">Edit</a> |
                <a href="@($"quizresults/details?quizresultid={quizresult.QuizResultId}")">Details</a> |
                <a href="@($"quizresults/delete?quizresultid={quizresult.QuizResultId}")">Delete</a>
            </TemplateColumn>
        </AuthorizeView>
    </QuickGrid>
}
else
{
    <p>No quiz results found for your account.</p>
}

@code {
    private string userId = string.Empty;
    private bool isAdmin = false;
    private TriolingoContext context = default!;
    private List<QuizResult> quizResults = new(); // Now it will be converted to IQueryable

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();

        // Get the current user's authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Extract the user ID (adjust claim type if necessary)
        userId = user.FindFirst("userId")?.Value ?? user.FindFirst("sub")?.Value ?? string.Empty;

        // Check if the user is an Administrator
        isAdmin = user.IsInRole("Administrator");

        // Fetch quiz results based on the user's role
        if (isAdmin)
        {
            quizResults = await context.QuizResult.ToListAsync();
        }
        else
        {
            quizResults = await context.QuizResult.Where(qr => qr.Email == userId).ToListAsync();
        }

        StateHasChanged(); // Ensure UI updates
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
