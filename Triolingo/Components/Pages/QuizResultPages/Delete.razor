@page "/quizresults/delete"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]
<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>QuizResult</h2>
    <hr />
    @if (quizresult is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Score</dt>
            <dd class="col-sm-10">@quizresult.Score</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">QuizId</dt>
            <dd class="col-sm-10">@quizresult.QuizId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@quizresult.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@quizresult.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@quizresult.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@quizresult.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@quizresult.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="quizresult" OnValidSubmit="DeleteQuizResult" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(quizresult is null)">Delete</button> |
            <a href="/quizresults">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private QuizResult? quizresult;

    [SupplyParameterFromQuery]
    private int QuizResultId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        quizresult = await context.QuizResult.FirstOrDefaultAsync(m => m.QuizResultId == QuizResultId);

        if (quizresult is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteQuizResult()
    {
        using var context = DbFactory.CreateDbContext();
        context.QuizResult.Remove(quizresult!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/quizresults");
    }
}
