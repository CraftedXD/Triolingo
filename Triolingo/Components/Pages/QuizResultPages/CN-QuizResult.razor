@page "/quizresults/chinese/review/{quizId:int}"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@using Triolingo.Data
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<TriolingoContext> DbFactory
@inject NavigationManager Navigation

<PageTitle>Quiz Review</PageTitle>

<h1>Review Your Answers</h1>

@if (questions != null && questions.Any())
{
    int correctAnswers = questions.Count(q => q.UserAnswer == q.CorrectAnswer);

    @foreach (var question in questions)
    {
        <div class="question-container">
            <p><b>@question.QuestionText</b></p>
            <p>Your Answer: @question.UserAnswer</p>
            <p>Correct Answer: @question.CorrectAnswer</p>
            <p>@(question.UserAnswer == question.CorrectAnswer ? "✔️" : "❌")</p>
        </div>
        <br />
    }

    <p><b>Score: @correctAnswers / @questions.Count</b></p>

    <button class="btn btn-primary" @onclick="TryQuizAgain">Try Again</button>

    @if (correctAnswers >= 3 && questions.Count == 5)
    {
        <button class="btn btn-success" @onclick="GoToNextLesson">Next Lesson</button>
    }
}
else
{
    <p>No questions available for review.</p>
}

@code {
    private string userId = string.Empty;
    private string userprogress = string.Empty;
    private IList<QuizResult> QuizResults;
    private IList<TriolingoUser> LangUser;
    private int correctAnswers = 0; // ✅ Declare correctAnswers here!

    [Parameter]
    public int QuizId { get; set; }

    private TriolingoContext context = default!;
    private List<Question> questions = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        LangUser = context.Users.ToList();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst("userId")?.Value ?? string.Empty;

        // Convert userId to int
        int.TryParse(userId, out int userIdInt);

        // Load questions for this quiz
        questions = await context.Question.Where(q => q.QuizId == QuizId).ToListAsync();

        // Load quiz results for this user
        QuizResults = context.QuizResult.Where(qr => qr.UserId == userIdInt).ToList();

        if (questions != null && questions.Any())
        {
            correctAnswers = questions.Count(q => q.UserAnswer == q.CorrectAnswer); // ✅ Now this works
            SaveQuizScore(userIdInt); // Pass userIdInt
        }
    }

    private void SaveQuizScore(int userIdInt)
    {
        using var context = DbFactory.CreateDbContext();

        var existingResult = context.QuizResult
            .FirstOrDefault(qr => qr.UserId == userIdInt && qr.QuizId == QuizId);

        if (existingResult != null)
        {
            // ✅ If user has taken this quiz before, update their score
            existingResult.Score = correctAnswers;
        }
        else
        {
            // ✅ If it's the first attempt, create a new entry
            var newQuizResult = new QuizResult
                {
                    UserId = userIdInt,
                    QuizId = QuizId,
                    Score = correctAnswers
                };

            context.QuizResult.Add(newQuizResult);
        }

        context.SaveChanges(); // ✅ Ensure the changes are saved
    }


    private void TryQuizAgain()
    {
        Navigation.NavigateTo($"/quizzes/chinese");
    }

    private void GoToNextLesson()
    {
        Navigation.NavigateTo("/lessons/chinese/next");
    }
}