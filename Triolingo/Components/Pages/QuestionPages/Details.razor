@page "/questions/details"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Question</h2>
    <hr />
    @if (question is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">QuestionText</dt>
            <dd class="col-sm-10">@question.QuestionText</dd>
            <dt class="col-sm-2">UserAnswer</dt>
            <dd class="col-sm-10">@question.UserAnswer</dd>
            <dt class="col-sm-2">CorrectAnswer</dt>
            <dd class="col-sm-10">@question.CorrectAnswer</dd>
            <dt class="col-sm-2">QuizId</dt>
            <dd class="col-sm-10">@question.QuizId</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@question.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@question.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@question.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@question.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/questions/edit?questionid={question.QuestionId}")">Edit</a> |
            <a href="@($"/questions")">Back to List</a>
        </div>
    }
</div>

@code {
    private Question? question;

    [SupplyParameterFromQuery]
    private int QuestionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        question = await context.Question.FirstOrDefaultAsync(m => m.QuestionId == QuestionId);

        if (question is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
