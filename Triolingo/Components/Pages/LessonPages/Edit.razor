@page "/lessons/edit"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Edit Lesson</PageTitle>

<h1>Edit Lesson</h1>
<hr />

@if (Lesson is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Lesson" OnValidSubmit="UpdateLesson">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="mb-3">
                    <label for="lessonname" class="form-label">Lesson Name:</label>
                    <InputText id="lessonname" @bind-Value="Lesson.LessonName" class="form-control" required />
                    <ValidationMessage For="() => Lesson.LessonName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lessoncontent" class="form-label">Lesson Content:</label>
                    <InputText id="lessoncontent" @bind-Value="Lesson.LessonContent" class="form-control" required />
                    <ValidationMessage For="() => Lesson.LessonContent" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lessonorder" class="form-label">Lesson Order:</label>
                    <InputNumber id="lessonorder" @bind-Value="Lesson.LessonOrder" class="form-control" required />
                    <ValidationMessage For="() => Lesson.LessonOrder" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="languageid" class="form-label">Language:</label>
                    <InputNumber id="languageid" @bind-Value="Lesson.LanguageId" class="form-control" required />
                    <ValidationMessage For="() => Lesson.LanguageId" class="text-danger" />
                </div>

                <!-- Readonly UpdatedBy Field -->
                <div class="mb-3">
                    <label for="updatedby" class="form-label">Updated By:</label>
                    <InputText id="updatedby" @bind-Value="Lesson.UpdatedBy" class="form-control" readonly />
                </div>

                <!-- Hidden DateUpdated Field -->
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">Date Updated:</label>
                    <InputDate id="dateupdated" @bind-Value="Lesson.DateUpdated" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/lessons">Back to List</a>
</div>

@code {
    private string userId = string.Empty;

    [SupplyParameterFromQuery]
    private int LessonId { get; set; }

    private Lesson? Lesson { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        // Fetch lesson by ID
        Lesson = await context.Lesson.FirstOrDefaultAsync(m => m.LessonId == LessonId);

        if (Lesson is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Get the authenticated user's email
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Identity?.Name ?? "Admin";

        // Ensure UpdatedBy is set correctly
        Lesson.UpdatedBy = userId;
    }

    private async Task UpdateLesson()
    {
        if (Lesson is null) return;

        using var context = DbFactory.CreateDbContext();

        // Ensure correct values are set
        Lesson.UpdatedBy = userId;
        Lesson.DateUpdated = DateTime.Now;

        // Update lesson in database
        context.Attach(Lesson).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!LessonExists(Lesson.LessonId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/lessons");
    }

    private bool LessonExists(int lessonId)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Lesson.Any(e => e.LessonId == lessonId);
    }
}