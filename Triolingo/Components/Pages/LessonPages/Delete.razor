@page "/lessons/delete"
@using Microsoft.EntityFrameworkCore
@using Triolingo.Domain
@inject IDbContextFactory<Triolingo.Data.TriolingoContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Lesson</h2>
    <hr />
    @if (lesson is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">LessonName</dt>
            <dd class="col-sm-10">@lesson.LessonName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LessonContent</dt>
            <dd class="col-sm-10">@lesson.LessonContent</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LessonOrder</dt>
            <dd class="col-sm-10">@lesson.LessonOrder</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LanguageId</dt>
            <dd class="col-sm-10">@lesson.LanguageId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@lesson.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@lesson.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@lesson.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@lesson.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="lesson" OnValidSubmit="DeleteLesson" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(lesson is null)">Delete</button> |
            <a href="/lessons">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Lesson? lesson;

    [SupplyParameterFromQuery]
    private int LessonId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        lesson = await context.Lesson.FirstOrDefaultAsync(m => m.LessonId == LessonId);

        if (lesson is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteLesson()
    {
        using var context = DbFactory.CreateDbContext();
        context.Lesson.Remove(lesson!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/lessons");
    }
}
